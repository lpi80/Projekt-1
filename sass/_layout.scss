
$hover: 'not all and (hover: none)';
$maxSmall: 767px;
$minMedium: 768px;
$maxMedium: 1199px;
$minLarge: 1200px;


$rwdColName: (
	('lg', 'minLarge', 'maxLarge'),
	('md', 'minMedium', 'maxMedium'),
	('s', 'minSmall', 'maxSmall')
);

$breakpoints: (
	'minSmall':  ( min-width:  0 ),
	'maxSmall':  ( max-width:  $maxSmall ),
	'minMedium': ( min-width:  $minMedium ),
	'maxMedium': ( max-width:  $maxMedium ),
	'minLarge':  ( min-width:  $minLarge ),
	'maxLarge':  ( max-width:  9999px )
);

/// Mixin to manage responsive breakpoints
@mixin respond-to($breakpoint, $secondBreakpoint: 'minSmall') {
	/// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) and map-has-key($breakpoints, $secondBreakpoint){
    /// Prints a media query based on the value
    	@media #{inspect(map-get($breakpoints, $breakpoint))} and #{inspect(map-get($breakpoints, $secondBreakpoint))} {
    	@content;
    	}
    }
  /// If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}


/// Mixin to manage responsive breakpoints
@mixin respond-to($breakpoint, $secondBreakpoint: 'minSmall') {
	/// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) and map-has-key($breakpoints, $secondBreakpoint){
    /// Prints a media query based on the value
    	@media #{inspect(map-get($breakpoints, $breakpoint))} and #{inspect(map-get($breakpoints, $secondBreakpoint))} {
    	@content;
    	}
    }
  /// If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}

@each $a, $b, $c in $rwdColName {
	@include respond-to($b,$c) {
		@for $i from 0 through $column {
			@if $i < $column {
        		.col-#{$a}-#{$i + 1} {
					$width: (100% / $column ) * ($i+1);
					flex: 0 0 $width;
						min-width: $width;  
						max-width: $width;      		}
    		}
    		.col-#{$a}-offset-#{$i} {
        		margin-left: (100% / $column ) * $i;
    		}
    	}
	}
}

@mixin myFlexRow ($justify-content, $align-items, $align-content, $direction, $minHeight: 50px, $zIndex: 0) {
    display: flex;
    justify-content: $justify-content;
    align-items: $align-items;
    align-content: $align-content;
    flex-direction: $direction;
    flex-wrap: wrap;
	min-height: $minHeight;
    z-index: $zIndex;
}


.row {
	&-center {
	@include myFlexRow(center, center, center, row, 30px);
	}

	&-space-around {
		@include myFlexRow(space-around, center, center, row, 30px);

	//	@media (max-width: $maxMedium) {
	//		@include myFlexRow(center, center, center, row, 30px);
	//	}
	}

	&-space-between {
		@include myFlexRow(space-between, center, center, row, 30px);
	//	@media (max-width: $maxMedium) {
	//		@include myFlexRow(center, center, center, row, 30px);
	//	}
	}
}

.left {
	text-align: left;
	padding-left: 5px;
	margin-left: 0;
}
.right {
	text-align: right;
	padding-right: 5px;
	margin-right: 0;
}

.center {
	text-align: center;
	&--small {
		@media (max-width: $maxSmall) {
			text-align: center;
		}
	}
}
